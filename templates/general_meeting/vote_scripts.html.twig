<script type="text/javascript">
    let socket;


    const socketOpenListener = function (e){
        console.log("Connection established!");
    };

    const socketMessageListener = function (e) {
        try
        {
            const message = JSON.parse(e.data);
            addMessage(message.name, message.message,message.type,message.votes,message.actions,message.valid);
        }
        catch(e)
        {
            // Catch any errors
        }
    }

    const socketCloseListener = function (e) {
        if (socket) {
            //console.error('Connection closed!');
        }
        try{
            socket = new WebSocket("ws://{{app.request.getHost()}}:3100/meeting_{{ meeting.hashId }}");
            socket.addEventListener('open', socketOpenListener);
            socket.addEventListener('message', socketMessageListener);
            socket.addEventListener('close', socketCloseListener);
        }catch (e) {

        }

    }
    socketCloseListener();


    function addMessage(name, message,type,votes,actions,valid=true) {
        //console.log(name,message,type,votes,actions);
        let v_total = $('#votes_total').val();
        let a_total = $('#actions_total').val();
        if(type==="vote") {
            let res = name.split("_");
            if (res[(res.length - 1)] === "0") {
                let v_count = parseInt($('#votes_count').val()) + parseInt(votes);
                let a_count = parseInt($('#actions_count').val()) + parseInt(actions);
                $('#votes_count').val(v_count);
                $('#actions_count').val(a_count);
                $('#act_span').text(a_count);
                $('#vot_span').text(v_count);
                let v_p = (v_count / v_total) * 100;
                v_p = v_p.toFixed(2);
                let a_p = (a_count / a_total) * 100;
                a_p = a_p.toFixed(2);
                $('#act_span_total').text(a_p);
                $('#vot_span_total').text(v_p);
            }

            {% if meeting.secret or voting.secret|default(false) %}
            let votes_count;
            let actions_count;
            let percent;
            switch (parseInt(message)) {
                case 1:
                    votes_count = $('#progressOn_' + res[(res.length - 1)]).data('votes');
                    actions_count = $('#progressOn_' + res[(res.length - 1)]).data('actions');
                    votes_count = parseInt(votes_count) + parseInt(votes);
                    actions_count = parseInt(actions_count) + parseInt(actions);
                {% if meeting.weight==1 %}
                    percent = (votes_count / v_total) * 100;
                    percent = percent.toFixed(2);
                {% else %}
                    percent = (actions_count / a_total) * 100;
                    percent = percent.toFixed(2);
                {% endif %}
                    $('#progressOn_' + res[(res.length - 1)]).data('votes', votes_count).data('actions', actions_count)
                        .attr('aria-valuenow', percent).prop('title', percent + '%')
                        .css({'width': percent + '%'})
                    break;
                case 0:
                    votes_count = $('#progressAgainst_' + res[(res.length - 1)]).data('votes');
                    actions_count = $('#progressAgainst_' + res[(res.length - 1)]).data('actions');
                    votes_count = parseInt(votes_count) + parseInt(votes);
                    actions_count = parseInt(actions_count) + parseInt(actions);
                {% if meeting.weight==1 %}
                    percent = (votes_count / v_total) * 100;
                    percent = percent.toFixed(2);
                {% else %}
                    percent = (actions_count / a_total) * 100;
                    percent = percent.toFixed(2);
                {% endif %}
                    $('#progressAgainst_' + res[(res.length - 1)]).data('votes', votes_count).data('actions', actions_count)
                        .attr('aria-valuenow', percent).prop('title', percent + '%')
                        .css({'width': percent + '%'})
                    break;
                case 2:
                    votes_count = $('#progressHold_' + res[(res.length - 1)]).data('votes');
                    actions_count = $('#progressHold_' + res[(res.length - 1)]).data('actions');
                    votes_count = parseInt(votes_count) + parseInt(votes);
                    actions_count = parseInt(actions_count) + parseInt(actions);
                {% if meeting.weight==1 %}
                    percent = (votes_count / v_total) * 100;
                    percent = percent.toFixed(2);
                {% else %}
                    percent = (actions_count / a_total) * 100;
                    percent = percent.toFixed(2);
                {% endif %}
                    $('#progressHold_' + res[(res.length - 1)]).data('votes', votes_count).data('actions', actions_count)
                        .attr('aria-valuenow', percent).prop('title', percent + '%')
                        .css({'width': percent + '%'})
                    break;
                default:
                    break;
            }
            {% endif %}
            $('#vote_' + name).addClass(getVoteColor(message));

            let a = parseInt($('.presence span.counter').text());
            a++;
            $('.presence span.counter').text(a);

        }else if(type ==="vote_turn"){
            $.each(message,function (k,vote){
                {% if meeting.secret or voting.secret|default(false) %}
                let votes_count;
                let actions_count;
                let percent;
                switch (valid) {
                    case true:
                        votes_count = $('#progressValid_' + vote).data('votes');
                        actions_count = $('#progressValid_' + vote).data('actions');
                        votes_count = parseInt(votes_count) + parseInt(votes);
                        actions_count = parseInt(actions_count) + parseInt(actions);
                    {% if meeting.weight==1 %}
                        percent = (votes_count / v_total) * 100;
                        percent = percent.toFixed(2);
                    {% else %}
                        percent = (actions_count / a_total) * 100;
                        percent = percent.toFixed(2);
                    {% endif %}
                        $('#progressValid_' + vote).data('votes', votes_count).data('actions', actions_count)
                            .attr('aria-valuenow', percent).prop('title', percent + '%')
                            .css({'width': percent + '%'})
                        break;
                    case false:
                        votes_count = $('#progressError_' + vote).data('votes');
                        actions_count = $('#progressError_' + vote).data('actions');
                        votes_count = parseInt(votes_count) + parseInt(votes);
                        actions_count = parseInt(actions_count) + parseInt(actions);
                    {% if meeting.weight==1 %}
                        percent = (votes_count / v_total) * 100;
                        percent = percent.toFixed(2);
                    {% else %}
                        percent = (actions_count / a_total) * 100;
                        percent = percent.toFixed(2);
                    {% endif %}
                        $('#progressError_' + vote).data('votes', votes_count).data('actions', actions_count)
                            .attr('aria-valuenow', percent).prop('title', percent + '%')
                            .css({'width': percent + '%'})
                        break;
                    default:
                        break;
                }
                //console.log("#vote_"+name+"_"+vote);
                $("#vote_"+name+"_"+vote).addClass(getVoteColor(valid));
                {% else %}
                //console.log("#vote_"+name+"_"+vote);
               $("#vote_"+name+"_"+vote).addClass(getVoteColor(valid));
                {% endif %}
            });
            let a = parseInt($('.presence span.counter').text());
            a++;
            $('.presence span.counter').text(a);
        }else if(type==="gm_management"){
            location.reload();
        }
    }

    function getVoteColor(vote){
        let _class="bg-";
        if(typeof vote == 'string'){
            vote = parseInt(vote);
        }
        switch (vote) {
            case 1:
            case true:
                _class+="success";
                break;
            case 0:
            case false:
                _class+="danger";
                break;
            case 2:
                _class+="warning";
                break;
            default:
                _class+="light";
                break;
        }
        return _class;
    }




    $('.btn-test-vote-start').on("click touch",function () {
        let url=$(this).data('href');
        if(confirm('{% trans %}general_meeting.voting.test_begin.confirm{% endtrans %}'))
        {
            $.ajax({
                type: 'PATCH',
                url: url,
                processData: false,
                contentType: 'application/merge-patch+json',
            }).done(function (result) {
                if(result.status==="success")
                {
                    const message = {
                        name:"organizator",
                        message: "meeting_start_test",
                        type: 'gm_management'
                    }
                    socket.send(JSON.stringify(message));
                    location.reload();
                }
            });
        }
    })

    $('#gm-end-vote').on('click',function () {
        let url=$(this).data('href');
        if(confirm('{% trans %}general_meeting.voting.end_vote.confirm{% endtrans %}'))
        {
            $.ajax({
                type: 'PATCH',
                url: url,
                processData: true,
                contentType: 'application/merge-patch+json',
            }).done(function (result) {
                if(result.status==="success")
                {
                    const message = {
                        name:"organizator",
                        message: "vote_current_end",
                        type: 'gm_management'
                    }
                    socket.send(JSON.stringify(message));
                    addMessage(message.name, message.message,message.type);

                }
            });
        }
    })
    $(".btn-vote").on("click", function() {
        let url='{{ path('app_ajax_general_meeting_save',{slug:meeting.slug}) }}';
        let vote=$(this).data('vote');
        let aid='{% if participant is defined %}{{ participant.aid }}{% else %}A0{% endif %}'
        const message = {
            name: aid+'_{{ (voting is not null ? '1' : '0') }}',
            message: vote,
            type:'vote',
            votes: '{% if participant is defined %}{{ participant.votes }}{% else %}0{% endif %}',
            actions: '{% if participant is defined %}{{ participant.actions }}{% else %}0{% endif %}'
        };
        $.ajax({
            type: 'PATCH',
            url: url,
            data: JSON.stringify({user:aid,vote:vote}),
            processData: true,
            contentType: 'application/merge-patch+json',
        }).done(function (result) {
            if(result.status==="success")
            {
                socket.send(JSON.stringify(message));
                addMessage(message.name, message.message,message.type,message.votes,message.actions);
                $('.btn-vote').prop('disabled',true);
            }
        });
    });

    $('.btn-gm-begin').on('click touch',function () {
        let url=$(this).data('href');
        if(confirm('{% trans %}general_meeting.begin.confirm{% endtrans %}'))
        {
            $.ajax({
                type: 'PATCH',
                url: url,
                processData: false,
                contentType: 'application/merge-patch+json',
            }).done(function (result) {
                if(result.status==="success")
                {
                    const message = {
                        name:"organizator",
                        message: "meeting_start",
                        type: 'gm_management'
                    }
                    socket.send(JSON.stringify(message));
                    location.reload();
                }
            });
        }
    })

    $('.btn-gm-end').on('click touch',function () {
        let url=$(this).data('href');
        if(confirm('{% trans %}general_meeting.end.confirm{% endtrans %}'))
        {
            $.ajax({
                type: 'PATCH',
                url: url,
                processData: false,
                contentType: 'application/merge-patch+json',
            }).done(function (result) {
                if(result.status==="success")
                {
                    const message = {
                        name:"organizator",
                        message: "meeting_end",
                        type: 'gm_management'
                    }
                    socket.send(JSON.stringify(message));
                    location.reload();
                }
            });
        }
    })

    $('.btn-gm-reset').on('click touch',function () {
        let href=$(this).data('href');
        let hash=$(this).data('hash');
        let url=$(this).data('url');
        if(confirm('{% trans %}general_meeting.restart.confirm{% endtrans %}'))
        {
            $.ajax({
                type: 'PATCH',
                url: href,
                processData: false,
                contentType: 'application/merge-patch+json',
            }).done(function (result) {
                if(result.status==="success")
                {
                    const message = {
                        name:"organizator",
                        message: "meeting_start",
                        type: 'gm_management'
                    }
                    socket.send(JSON.stringify(message));
                    location.reload();
                }
            });
        }
    })

    $('.btn-gm-activate-vote').on('click',function(){
       let url=$(this).data('href');
       if(confirm('{% trans %}general_meeting.voting.activate.confirm{% endtrans %}'))
       {
           activateVote(url);
       }
    });

    $('.btn-gm-repeat-vote').on('click',function(){
        let url=$(this).data('href');
        if(confirm('{% trans %}general_meeting.voting.repeat.confirm{% endtrans %}'))
        {
            activateVote(url);
        }
    });

    $('.btn-activate-turn').on('click',function(){
        let url=$(this).data('href');
        if(confirm($(this).data('confirm')))
        {
            activateVote(url);
        }
    });


    {% if voting is not null %}
    $('#voteCandidateForm').on('submit',function (e){
       e.preventDefault();

        let theCheckboxes =$(this).find("input[type='checkbox']");
        let max={{ voting.toChoose }};
        let checked=theCheckboxes.filter(":checked");
        let data=candidatesVoteData($(this).serializeArray());
        if(checked.length===0)
        {
            alert("{% trans %}general_meeting.voting.choose_candidates_to_vote{% endtrans %}")
        }else if(checked.length>max)
        {
            {% if meeting.badVoteSettings==1 %}
            if(confirm('{% trans %}general_meeting.voting.invalid_vote.confirm{% endtrans %}')) {
                candidatesVoteSend(data, false);
                $(theCheckboxes).prop('disabled', true);
            }
            {% else %}
                let warned=$(this).data('warned');
                let warning=$(this).data('warning');
                {% if meeting.badVoteSettings==2 %}
                    alert(warning)
                {% else %}
                    if(!warned)
                    {
                        alert(warning);
                        $(this).data('warned',true);
                    }else{
                        if(confirm('{% trans %}general_meeting.voting.invalid_vote.confirm{% endtrans %}'))
                        {
                            candidatesVoteSend(data,false);
                            $(theCheckboxes).prop('disabled',true);
                        }
                    }
                {% endif %}
            {% endif %}
        }else{
            candidatesVoteSend(data,true);
            $(theCheckboxes).prop('disabled',true);
        }
    });

    $('#voteAnswerForm').on('submit',function (e){
        e.preventDefault();
        let theCheckboxes = {% if voting.multiChoose %}$(this).find("input[type='checkbox']"){% else %}$(this).find("input[type='radio']"){% endif %};
        let checked=theCheckboxes.filter(":checked");
        let data=candidatesVoteData($(this).serializeArray());
        //console.log(data);
        if(checked.length===0)
        {
            alert("{% trans %}general_meeting.voting.choose_answers_to_vote{% endtrans %}")
        }else{
            answersVoteSend(data,true);
            $(theCheckboxes).prop('disabled',true);
        }
    });

    $('#resolutionForm').on('submit',function (e){
        e.preventDefault();
        let $this = $(this);
        let url='{{ path('app_ajax_general_meeting_save',{slug:meeting.slug}) }}';
        let vote=$this.find("input[type='radio']:checked").val();
        let aid='{% if participant is defined %}{{ participant.aid }}{% else %}A0{% endif %}'
        const message = {
            name: aid+'_{{ (voting is not null ? '1' : '0') }}',
            message: vote,
            type:'vote',
            votes: '{% if participant is defined %}{{ participant.votes }}{% else %}0{% endif %}',
            actions: '{% if participant is defined %}{{ participant.actions }}{% else %}0{% endif %}'
        };
        $.ajax({
            type: 'PATCH',
            url: url,
            data: JSON.stringify({user:aid,vote:vote}),
            processData: true,
            contentType: 'application/merge-patch+json',
        }).done(function (result) {
            if(result.status==="success")
            {
                socket.send(JSON.stringify(message));
                addMessage(message.name, message.message,message.type,message.votes,message.actions);
                $this.find("button, input").prop('disabled',true);
            }
        });
    });
    {% endif %}

    function candidatesVoteSend(votes,valid)
    {
        let url='{{ path('app_ajax_general_meeting_save',{slug:meeting.slug}) }}';
        let aid='{% if participant is defined %}{{ participant.aid }}{% else %}A0{% endif %}'
        const message = {
            name: aid,
            message: votes,
            type:'vote_turn',
            votes: '{% if participant is defined %}{{ participant.votes }}{% else %}0{% endif %}',
            actions: '{% if participant is defined %}{{ participant.actions }}{% else %}0{% endif %}',
            valid :valid
        };
        $.ajax({
            type: 'PATCH',
            url: url,
            data: JSON.stringify({user:aid,votes:votes,valid:valid}),
            processData: true,
            contentType: 'application/merge-patch+json',
        }).done(function (result) {
            if(result.status==="success")
            {
                socket.send(JSON.stringify(message));
                addMessage(message.name, message.message,message.type,message.votes,message.actions,message.valid);
                $('#voteCandidateForm').find('button').prop('disabled',true);
            }
        });
    }

    function answersVoteSend(votes)
    {
        let url='{{ path('app_ajax_general_meeting_save',{slug:meeting.slug}) }}';
        let aid='{% if participant is defined %}{{ participant.aid }}{% else %}A0{% endif %}'
        const message = {
            name: aid,
            message: votes,
            type:'vote_turn',
            votes: '{% if participant is defined %}1{% else %}0{% endif %}',
            actions: '{% if participant is defined %}1{% else %}0{% endif %}'
        };
        $.ajax({
            type: 'PATCH',
            url: url,
            data: JSON.stringify({user:aid,votes:votes}),
            processData: true,
            contentType: 'application/merge-patch+json',
        }).done(function (result) {
            if(result.status==="success")
            {
                socket.send(JSON.stringify(message));
                addMessage(message.name, message.message,message.type,message.votes,message.actions);
                $('#voteAnswerForm').find('button').prop('disabled',true);
            }
        });
    }

    function candidatesVoteData(data)
    {
        let res=[];
        $.each(data,function (k,item){
            res.push(item.value);
        });
        return res;
    }

    function activateVote(url) {
        $.ajax({
            type: 'PATCH',
            url: url,
            processData: false,
            contentType: 'application/merge-patch+json',
        }).done(function (result) {
            if(result.status==="success")
            {
                const message = {
                    name:"organizator",
                    message: "activate_vote",
                    type: 'gm_management'
                }
                socket.send(JSON.stringify(message));
                location.reload();
            }
        });
    }

    $('.historical-btn').on('click touch',function(){
        $(this).find('span').toggleClass('d-none');
        $(this).parent().find('.previous_results').toggleClass('d-none');
    })
</script>